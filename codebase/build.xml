<?xml version="1.0"?>
<!--
              Welcome to PGauge - HLA Benchmarking Suite

      PGague is a suite of HLA benchmarking applications originally
      designed to test and measure the performance of Portico. It
      is cross-platform, supports Java and C++ interfaces and can
      be used with multiple RTI implementations.

               https://github.com/openlvc/pgauge

         File: build.xml
      Purpose: The master build file. This file imports all system
               support files, declares common targets and extension
               points and imports all the child build files.
               Do not edit this file except to add new profiles.
-->
<project name="pgauge" default="compile">

	<!-- =========================================================== -->
	<!--                      General Settings                       -->
	<!-- =========================================================== -->
	<description>
		Cross-platform HLA performance testing suite
	</description>

	<!-- =========================================================== -->
	<!--               Common Properties and Utilities               -->
	<!-- =========================================================== -->
	<!-- load the users properties file -->
	<property file="local.properties"/>
	<property file="build.properties"/>

	<!-- project-wide settings -->
	<import file="profiles/common.properties.xml"/>
	<import file="profiles/common.macros.xml"/>

	<!-- project-specific initialization settings -->
	<import file="profiles/init.xml"/>

	<!-- =========================================================== -->
	<!--                       Master Targets                        -->
	<!-- =========================================================== -->
	<target name="clean"
	        description="Removes all generated build artefacts"
	        depends="master.clean,common.clean"/>
	
	<target name="compile"
	        description="Compile all the production code"
	        depends="master.compile"/>

	<target name="sandbox"
	        description="Create a sandbox environment to test and validate in"
	        depends="master.sandbox"/>

	<target name="installer"
	        description="Create an installer package from the sandbox"
	        depends="master.installer"/>

	<target name="release"
	        description="Clean, run all test sand generate a standard release package"
	        depends="clean,build.release,master.release,installer"/>

	<!-- =========================================================== -->
	<!--                      Extension Points                       -->
	<!-- =========================================================== -->
	<!-- These extension points are defined for the various profile targets
	     to hook onto, thus allowing them to identify themselves as targets
	     that should be run as part of a particular global action.
	     
	     This means that when we run "compile", any imported targets that
	     are declared as an extensionOf "master.compile" will be executed.
	     
	     An extension point for each major build action is defined.
	-->
	<extension-point name="master.clean"/>
	<extension-point name="master.compile"/>
	<extension-point name="master.sandbox"/>
	<extension-point name="master.installer"/>
	<extension-point name="master.release"/>

	<!-- =========================================================== -->
	<!--                        Build Profiles                       -->
	<!-- =========================================================== -->
	<!-- Platform neutral java build -->
	<include file="profiles/java.xml" as="java"/>

	<!-- Cross-Platform cpp build -->
	<!--
	<include file="profiles/cpp.xml"  as="cpp"/>
	-->

	<!-- Installer generation targets -->
	<include file="profiles/installer.xml" as="installer"/>

	<!-- Mac OS X C++ and Installer profiles -->
	<!--
	<include file="profiles/macosx/hla13.xml"        as="cpp.hla13"      if="platform.macosx"/>
	<include file="profiles/macosx/installer.xml"    as="installer"      if="platform.macosx"/>
	-->
	 
	<!-- Linux C++ and Installer profiles -->
	<!--
	<include file="profiles/linux/hla13.xml"         as="cpp.hla13"      if="platform.linux64"/>
	<include file="profiles/linux/installer.xml"     as="installer"      if="platform.linux64"/>
	-->
	 
	<!-- Windows C++ and Installer profiles -->
	<!--
	<include file="profiles/windows/hla13.xml"       as="cpp.hla13"      if="platform.windows"/>
	<include file="profiles/windows/installer.xml"   as="installer"      if="platform.windows"/>
	-->

	<!-- =========================================================== -->
	<!-- Convenience targets for specifying debug or release builds. -->
	<!-- =========================================================== -->
	<target name="build.release">
		<echo>Build flagged as a RELEASE BUILD.</echo>
		<property name="build.release" value="true"/>
	</target>

	<!-- =========================================================== -->
	<!--      Private Internal Targets. Do not modify or extend.     -->
	<!-- =========================================================== -->
	<target name="common.clean">
		<!-- Remove any top-level directories that might need to go -->
		<delete dir="${build.dir}"/>
		<delete dir="${dist.dir}"/>
	</target>

</project>
